<div class="payment-form">
    <div class="form-group saved-cards-section" style="display: none">
        <label for="savedCards">Saved Cards</label>
        <select id="savedCards" name="savedCards" onchange="toggleCardForm()">
            <option value="new">Use New Card</option>
        </select>
    </div>

    <div id="newCardForm">
        <div class="form-group">
            <label for="number-container">Card Number</label>
            <div id="number-container" class="microform-field"></div>
        </div>
        <div class="form-group">
            <label for="securityCode-container">CVV</label>
            <div id="securityCode-container" class="microform-field"></div>
        </div>
        <div class="form-group">
            <label>Expiration Date </label>
            <div class="expiry-group">
                <input id="expMonth" type="text" placeholder="MM" maxlength="2" required>
                <input id="expYear" type="text" placeholder="YYYY" maxlength="4" required>
            </div>
            <div id="expiry-error" class="error-message">Please enter a valid expiration date.</div>
        </div>
        <div class="form-group" style="display: none">
            <label>
                <input type="checkbox" id="saveCard" name="saveCard"> Save Card
            </label>
        </div>
    </div>
    <input id="cybersource_transaction_id" type="hidden" name="cybersource_transaction_id" value="">
    <input id="cybersource_payment_status" type="hidden" name="cybersource_payment_status" value="">
    <input id="cybersource_payment_uniqid" type="hidden" name="cybersource_payment_uniqid" value="">
    <input id="cybersource_authentication_transaction_id" type="hidden" name="cybersource_authentication_transaction_id"
           value="">
    <input id="cybersource_transient_token_jwt" type="hidden" name="cybersource_transient_token_jwt" value="">
    <input id="cybersource_subscription_id" type="hidden" name="cybersource_subscription_id" value="">
    <input id="cybersource_expiration_month" type="hidden" name="cybersource_expiration_month" value="">
    <input id="cybersource_expiration_year" type="hidden" name="cybersource_expiration_year" value="">
    <div class="d-grid">
        <button id="confirmOrderButton" class="pay-btn btn" type="button">Pay Now</button>
    </div>
    <div id="step_up"></div>
</div>

<script>
    let microform = null;
    const paymentForm = document.getElementById('confirmOrderForm');
    let savedCards = [];

    document.getElementById('confirmFormSubmit').style.display = 'none';

    fetch('/cybersource/get-saved-cards')
        .then(res => res.json())
        .then(data => {
            savedCards = data.cards || [];
            const savedCardsSelect = document.getElementById('savedCards');
            savedCards.forEach(card => {
                const option = document.createElement('option');
                option.value = card.id;
                option.textContent = `Card: **** **** **** ${card.card.number.slice(-4)} (Expired: ${card.card.expirationMonth}/${card.card.expirationYear})`;
                savedCardsSelect.appendChild(option);
            });
            toggleCardForm();
        })
        .catch(err => console.error('Failed to load saved cards:', err));

    function toggleCardForm() {
        const savedCardsSelect = document.getElementById('savedCards');
        const newCardForm = document.getElementById('newCardForm');
        if (savedCardsSelect.value === 'new') {
            newCardForm.style.display = 'block';
        } else {
            newCardForm.style.display = 'none';
        }
    }

    document.getElementById('confirmOrderButton').addEventListener('click', function (e) {
        e.preventDefault();
        const button = e.target;
        button.disabled = true;
        button.textContent = 'Processing...';

        const savedCardsSelect = document.getElementById('savedCards');
        const subscriptionId = savedCardsSelect.value !== 'new' ? savedCardsSelect.value : null;

        if (subscriptionId) {
            authorizePayment(null, subscriptionId);
            return;
        }

        const monthInput = document.getElementById('expMonth');
        const yearInput = document.getElementById('expYear');
        const errorMessage = document.getElementById('expiry-error');
        const saveCardCheckbox = document.getElementById('saveCard');

        // Reset error states
        monthInput.classList.remove('error');
        yearInput.classList.remove('error');
        errorMessage.style.display = 'none';

        // Validate expiration date
        const month = monthInput.value.trim();
        const year = yearInput.value.trim();
        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth() + 1; // 1-12

        if (!month || !year || !/^\d{2}$/.test(month) || !/^\d{4}$/.test(year)) {
            showError('Please enter a valid expiration date (MM/YYYY).');
            return;
        }

        const monthNum = parseInt(month, 10);
        const yearNum = parseInt(year, 10);

        if (monthNum < 1 || monthNum > 12) {
            showError('Month must be between 01 and 12.');
            return;
        }

        if (yearNum < currentYear || (yearNum === currentYear && monthNum < currentMonth)) {
            showError('Expiration date cannot be in the past.');
            return;
        }

        if (!microform) {
            alert('Card fields are not loaded yet. Please wait a few seconds.');
            return;
        }

        microform.createToken({
            cardExpirationMonth: month,
            cardExpirationYear: year
        }, function (err, token) {
            if (err) {
                console.error('Tokenize failed', err);
                alert('Card information could not be verified.');
            } else {
                authorizePayment(token, null, saveCardCheckbox.checked);
            }
        });
    });

    fetch('/cybersource/capture-context')
        .then(res => res.json())
        .then(data => {
            const captureContext = data.captureContext;
            const parts = captureContext.split('.');
            const payload = JSON.parse(atob(parts[1]));
            const libUrl = payload.ctx[0].data.clientLibrary;
            const integrity = payload.ctx[0].data.clientLibraryIntegrity;

            const script = document.createElement('script');
            script.src = libUrl;
            script.integrity = integrity;
            script.crossOrigin = 'anonymous';
            script.onload = () => {
                const flex = new Flex(captureContext);
                microform = flex.microform({
                    styles: {
                        input: {
                            'font-size': '14px',
                            'color': '#333',
                            'border': '1px solid #ccc',
                            'border-radius': '4px'
                        }
                    }
                });

                microform.createField('number', {placeholder: 'Card Number'}).load('#number-container');
                microform.createField('securityCode', {placeholder: 'CVV'}).load('#securityCode-container');
            };
            document.head.appendChild(script);
        })
        .catch(err => console.error('Failed to load capture context:', err));


    function collectDeviceData(setupData, callback) {
        const deviceDataCollectionUrl = setupData.consumerAuthenticationInformation.deviceDataCollectionUrl;
        const accessToken = setupData.consumerAuthenticationInformation.accessToken;

        const iframe = document.createElement('iframe');
        iframe.name = 'deviceDataFrame';
        iframe.style.display = 'none';
        document.body.appendChild(iframe);

        const form = document.createElement('form');
        form.method = 'POST';
        form.action = deviceDataCollectionUrl;
        form.target = 'deviceDataFrame';
        form.style.display = 'none';

        const jwtInput = document.createElement('input');
        jwtInput.type = 'hidden';
        jwtInput.name = 'JWT';
        jwtInput.value = accessToken;
        form.appendChild(jwtInput);

        document.body.appendChild(form);
        form.submit();

        window.addEventListener('message', function handler(event) {
            if (event.origin.includes('cardinalcommerce.com')) {
                callback(event.data);
                document.body.removeChild(iframe);
                document.body.removeChild(form);
            }
        }, {once: true});
    }

    function proceedWithAuthentication(token, subscriptionId, saveCard, month, year, setupData, callbackData) {
        fetch('/cybersource/proceed-authentication', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                token,
                subscriptionId,
                saveCard,
                expirationMonth: month,
                expirationYear: year,
                setupResponse: setupData,
                callbackData: callbackData,
                uniqid: setupData.uniqid,
            })
        })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message || 'Authentication failed. Please try again.');
                    return;
                }

                if (data.action === '3ds') {
                    const step_up = document.getElementById('step_up');
                    step_up.innerHTML = '';
                    const iframe = document.createElement('iframe');
                    iframe.id = 'step_up_iframe';
                    iframe.name = 'step_up_iframe';
                    iframe.height = '500';
                    iframe.width = '358';
                    iframe.style.display = 'block';

                    step_up.appendChild(iframe);

                    const stepUpForm = document.createElement('form');
                    stepUpForm.id = 'step_up_form';
                    stepUpForm.target = 'step_up_iframe';
                    stepUpForm.method = 'POST';
                    stepUpForm.action = data.stepUpUrl;
                    stepUpForm.style.display = 'none';

                    const pareqInput = document.createElement('input');
                    pareqInput.type = 'hidden';
                    pareqInput.id = 'step_up_pareq';
                    pareqInput.name = 'JWT';
                    pareqInput.value = data.accessToken;

                    const mdInput = document.createElement('input');
                    mdInput.type = 'hidden';
                    mdInput.id = 'step_up_md';
                    mdInput.name = 'MD';
                    mdInput.value = JSON.stringify({
                        authenticationTransactionId: data.authenticationTransactionId,
                        uniqid: data.uniqid,
                        pareq: data.pareq,
                        cardType: data.cardType,
                        orderInfo: data.orderInfo,
                        saveCard: saveCard,
                        transientTokenJwt: token,
                        subscriptionId: subscriptionId,
                        expirationMonth: month,
                        expirationYear: year
                    });

                    stepUpForm.appendChild(pareqInput);
                    stepUpForm.appendChild(mdInput);

                    step_up.appendChild(stepUpForm);
                    stepUpForm.submit();

                } else {

                    document.getElementById('cybersource_payment_status').value = data.status;
                    document.getElementById('cybersource_payment_uniqid').value = data.uniqid;
                    document.getElementById('cybersource_transient_token_jwt').value = token || '';
                    document.getElementById('cybersource_subscription_id').value = subscriptionId || '';
                    document.getElementById('cybersource_expiration_month').value = month;
                    document.getElementById('cybersource_expiration_year').value = year;

                    if (data.action === 'complete') {
                        document.getElementById('cybersource_transaction_id').value = data.transactionId;
                        document.getElementById('confirmFormSubmit').click();
                    } else if (data.action === 'notify') {
                        alert(data.message);
                    }
                }
            })
            .catch(err => {
                console.error('Authentication error:', err);
                alert('An error occurred during authentication. Please try again.');
            });
    }

    function authorizePayment(token, subscriptionId, saveCard = false) {
        const month = document.getElementById('expMonth').value.trim();
        const year = document.getElementById('expYear').value.trim();

        fetch('/cybersource/authorize-payment', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({token, subscriptionId, expirationMonth: month, expirationYear: year, saveCard})
        })
            .then(res => res.json())
            .then(data => {
                if (!data.success) {
                    alert(data.message || 'Payment setup failed. Please try again.');
                    return;
                }

                if (data.action === 'setup') {
                    collectDeviceData(data, (callbackData) => {
                        proceedWithAuthentication(token, subscriptionId, saveCard, month, year, data, callbackData);
                    });
                } else {
                    document.getElementById('cybersource_payment_status').value = data.status;
                    document.getElementById('cybersource_payment_uniqid').value = data.uniqid;
                    document.getElementById('cybersource_transient_token_jwt').value = token || '';
                    document.getElementById('cybersource_subscription_id').value = subscriptionId || '';
                    document.getElementById('cybersource_expiration_month').value = month;
                    document.getElementById('cybersource_expiration_year').value = year;

                    if (data.action === 'complete') {
                        document.getElementById('cybersource_transaction_id').value = data.transactionId;
                        document.getElementById('confirmFormSubmit').click();
                    } else if (data.action === 'notify') {
                        alert(data.message);
                    }
                }
            })
            .catch(err => {
                console.error('Payment setup error:', err);
                alert('An error occurred during payment setup. Please try again.');
            });
    }

    window.addEventListener('message', function (event) {

        const origin = event.origin;
        const currentDomain = window.location.origin;
        if (!origin.includes('cybersource.com') &&  !origin.includes(currentDomain)) {
            return;
        }

        if (event.data?.action === "close_frame") {
            debugger;
            const step_up = document.getElementById('step_up');
            step_up.innerHTML = '';

            let data = event.data.data;
            if (typeof data === 'string') {
                try {
                    data = JSON.parse(data);
                } catch (e) {
                    console.error('Failed to parse data:', e);
                    return;
                }
            }

            document.getElementById('cybersource_payment_status').value = data.success;
            document.getElementById('cybersource_payment_uniqid').value = data.uniqid;
            if (data.success) {
                document.getElementById('cybersource_transaction_id').value = data.transactionId;
                document.getElementById('confirmFormSubmit').click();
            } else if (data.action === 'notify') {
                alert(data.message);
                document.getElementById('confirmOrderButton').disabled = false;
                document.getElementById('confirmOrderButton').textContent = 'Pay Now';
            }
        }

    });

    function showError(message) {
        const monthInput = document.getElementById('expMonth');
        const yearInput = document.getElementById('expYear');
        const errorMessage = document.getElementById('expiry-error');

        monthInput.classList.add('error');
        yearInput.classList.add('error');
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        monthInput.focus();
    }
</script>

<style>
    .payment-form {
        max-width: 400px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-family: Arial, sans-serif;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        font-size: 14px;
        margin-bottom: 5px;
        color: #333;
    }

    input, .microform-field, select {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        height: 40px;
    }

    .expiry-group {
        display: flex;
        gap: 10px;
    }

    .expiry-group input {
        width: 50%;
    }

    .pay-btn {
        display: block;
        width: 100%;
        padding: 12px;
        font-size: 16px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    #step_up_iframe {
        margin-top: 20px;
        border: 1px solid #ddd;
    }

    .error {
        border-color: #dc3545;
    }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .saved-cards-section {
        margin-bottom: 20px;
    }
</style>