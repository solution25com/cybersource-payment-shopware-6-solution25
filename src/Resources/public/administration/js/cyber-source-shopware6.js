!function(){var e={461:function(){let{Mixin:e}=Shopware;e.register("api-validation-errors",{methods:{handleError(e){switch(e.code){case"API_ERROR":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.API_ERROR"),autoClose:!0});break;case"ORDER_TRANSACTION_NOT_FOUND":this.createNotificationError({message:e.detail,autoClose:!0});break;case"REFUND_TRANSACTION_NOT_ALLOWED":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.REFUND_TRANSACTION_NOT_ALLOWED"),autoClose:!0});break;case"CHECKOUT__REFUND_PROCESS_INTERRUPTED":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.CYBERSOURCE_REFUND_AMOUNT_INCORRECT"),autoClose:!0})}}}})}},t={};function r(s){var n=t[s];if(void 0!==n)return n.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,r),a.exports}r.p="bundles/cybersourceshopware6/",window?.__sw__?.assetPath&&(r.p=window.__sw__.assetPath+"/bundles/cybersourceshopware6/"),function(){"use strict";r(461);let{Component:e,Mixin:t}=Shopware,{mapState:s}=e.getComponentHelper();e.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment_method_select %}\n    {% parent %}\n    <div class="cybersource-controls" v-if="isCyberSourceCreditCardPaymentMethod()">\n        <div class="refund-controls">\n            <sw-button-process v-if="(paymentStatus === \'open\' || paymentStatus === \'authorized\') && cybersourceTransactionId !== \'\' "\n                @click="onCaptureAction(cybersourceTransactionId)" :isLoading="buttonLoading">\n                {{ $tc(\'cybersource_shopware6.capture.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n\n        <div class="refund-controls">\n            <sw-button-process v-if="paymentStatus === \'paid\' || paymentStatus === \'refunded_partially\'" @click="onRefundAction(cybersourceTransactionId)" :isLoading="buttonLoading">\n             {{ $tc(\'cybersource_shopware6.refund.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n    </div>\n{% endblock %}\n',mixins:["notification",t.getByName("api-validation-errors")],inject:["CybersourceOrderService"],props:{orderId:{required:!0,type:String}},data(){return{paymentStatus:"",cybersourceTransactionId:"",buttonLoading:!1,totalAmount:0}},computed:{...s("swOrderDetail",["order"])},methods:{isCyberSourceCreditCardPaymentMethod(){let e=this.order.transactions.first();return e.paymentMethod.name&&"CyberSourceCreditCard"==e.paymentMethod.name},onCaptureAction(e){this.buttonLoading=!0,this.CybersourceOrderService.capturePayment(this.orderId,e).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.capture.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="paid"),this.buttonLoading=!1}).catch(e=>(this.buttonLoading=!1,this.handleError(e.response.data.errors[0])))},onRefundAction(e){this.buttonLoading=!0,this.CybersourceOrderService.refundPayment(this.orderId,e,this.totalAmount).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.refund.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="refunded"),this.buttonLoading=!1}).catch(e=>(this.buttonLoading=!1,this.handleError(e.response.data.errors[0])))},createdComponent(){this.$super("createdComponent"),this.fetchOrderDetails()},fetchOrderDetails(){if(!this.isCyberSourceCreditCardPaymentMethod())return!1;this.orderId=this.order.id,this.CybersourceOrderService.getOrderByOrderId(this.orderId).then(e=>{this.cybersourceTransactionId=e.cybersource_transaction_id,this.paymentStatus=e.payment_status,this.totalAmount=e.amount}).catch(e=>this.handleError(e.response.data.errors[0]))}}});let n=Shopware.Classes.ApiService;var a=class extends n{constructor(e,t,r="cybersource"){super(e,t,r)}getOrderByOrderId(e){let t=`${this.getApiBasePath()}/order/${e}`;return this.httpClient.get(t,{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}capturePayment(e,t){let r=`${this.getApiBasePath()}/order/${e}/capture/${t}`;return this.httpClient.post(r,null,{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}refundPayment(e,t,r,s=[]){let a=`${this.getApiBasePath()}/order/${e}/refund/${t}`,o={newTotalAmount:r};return s?.length&&(o={...o,lineItems:s}),this.httpClient.post(a,o,{headers:this.getBasicHeaders()}).then(e=>n.handleResponse(e))}};let{Application:o}=Shopware,i=o.getContainer("init");o.addServiceProvider("CybersourceOrderService",e=>new a(i.httpClient,e.loginService));let{Component:c,Mixin:d}=Shopware;c.override("sw-order-detail",{template:'{% block sw_order_detail_actions_save %}\n<template v-if="isElligibleForCyberSourceRefund()">\n\n        <sw-button-process\n            v-tooltip="{\n                message: $tc(\'sw-privileges.tooltip.warning\'),\n                disabled: acl.can(\'order.editor\'),\n                showOnDisabledElements: true\n            }"\n            class="sw-order-detail__smart-bar-save-button"\n            variant="primary"\n            :disabled="isLoading || !acl.can(\'order.editor\')"\n            :is-loading="isLoading"\n            :process-success="isSaveSuccessful"\n            @update:process-success="saveEditsFinish"\n            @click.prevent="onSaveEdits"\n        >\n            {{ $tc(\'cybersource_shopware6.orderSave.buttonTitle\') }}\n        </sw-button-process>\n        <sw-order-update-page-modal\n            v-if="isDisplayingSaveChangesWarning"\n            @page-update-cancel="onSaveModalClose"\n            @page-update-confirm="onSaveModalConfirm"\n            @page-update-close="onSaveModalCancel"\n            :hasPriceIncreased="hasPriceIncreased"\n            :previousTotalAmount="previousTotalAmount"\n        />\n</template>\n<template v-else>\n{% parent %}\n</template>\n{% endblock %}\n',mixins:["notification",d.getByName("api-validation-errors")],inject:["CybersourceOrderService","orderService"],props:{orderId:{required:!0,type:String}},data(){return{paymentStatus:"",previousTotalAmount:0,cybersourceTransactionId:null,isDisplayingSaveChangesWarning:!1,next:null,hasPriceIncreased:!1,lineItems:[]}},watch:{order:{deep:!0,immediate:!0,handler(){this.fetchOrderDetails()}}},methods:{isCyberSourceCreditCardPaymentMethod(){if(null===this.order)return!1;let e=this.order.transactions.first();return e.paymentMethod.name&&"CyberSourceCreditCard"==e.paymentMethod.name},createdComponent(){this.fetchOrderDetails(),this.$super("createdComponent")},isElligibleForCyberSourceRefund(){return null!==this.order&&["paid","refunded_partially"].includes(this.paymentStatus)&&+this.order.price.totalPrice!=this.previousTotalAmount},fetchOrderDetails(){this.isCyberSourceCreditCardPaymentMethod()&&(this.cybersourceTransactionId=null,this.paymentStatus="",this.previousTotalAmount=0,this.lineItems=[],this.CybersourceOrderService.getOrderByOrderId(this.orderId).then(e=>{this.cybersourceTransactionId=e.cybersource_transaction_id,this.paymentStatus=e.payment_status,this.previousTotalAmount=+e.amount}).catch(e=>this.handleError(e.response.data.errors[0])))},onSaveEdits(){this.isOrderEditing&&this.isElligibleForCyberSourceRefund()?(this.hasPriceIncreased=+this.order.price.totalPrice>this.previousTotalAmount,this.isDisplayingSaveChangesWarning=!0):this.$super("onSaveEdits")},onSaveModalClose(){this.isDisplayingSaveChangesWarning=!1,this.isOrderEditing=!0,this.hasPriceIncreased||this.$super("onSaveEdits")},onSaveModalCancel(){this.isDisplayingSaveChangesWarning=!1},onSaveModalConfirm(){if(this.isDisplayingSaveChangesWarning=!1,this.hasPriceIncreased)return this.$super("onSaveEdits");let e=this.order.lineItems.map(e=>({number:e.position,productName:e.label,productCode:e.payload.productNumber,unitPrice:e.unitPrice,totalAmount:e.totalPrice,quantity:e.quantity,taxAmount:e.price.calculatedTaxes.reduce((e,t)=>e+=t.tax,0),productSku:e.payload.productNumber}));this.CybersourceOrderService.refundPayment(this.orderId,this.cybersourceTransactionId,this.order.price.totalPrice,e).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.refund.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="refunded"),this.buttonLoading=!1,this.$super("onSaveEdits")}).catch(e=>(this.buttonLoading=!1,this.handleError(e.response.data.errors[0])))}}}),Shopware.Component.register("sw-order-update-page-modal",{template:'{% block sw_order_update_page_modal %}\n<sw-modal\n    :title="$tc(\'cybersource_shopware6.orderSaveConfirmationModal.headline\')"\n    variant="small"\n    @modal-close="onClose"\n>\n\n    {% block sw_order_update_page_modal_content %}\n    <template v-if="hasPriceIncreased === true">\n        {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.increased.description\') }}\n    </template>\n    <template v-else>\n        <div\n            v-html="amountDecreasedDescription"\n        >\n        </div>\n    </template>\n    {% endblock %}\n\n    <template #modal-footer>\n        {% block sw_order_update_page_modal_actions %}\n\n        {% block sw_order_update_page_modal_action_cancel %}\n        <template v-if="hasPriceIncreased === true">\n            <sw-button\n                size="small"\n                @click="onCancel"\n            >\n                {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.increased.cancelButton\') }}\n            </sw-button>\n        </template>\n        <template v-else>\n            <sw-button\n                size="small"\n                @click="onCancel"\n            >\n                {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.decreased.cancelButton\') }}\n            </sw-button>\n        </template>\n        {% endblock %}\n\n        {% block sw_order_update_page_modal_action_confirm %}\n        <template v-if="hasPriceIncreased !== true">\n        <sw-button\n            variant="primary"\n            size="small"\n            @click="onConfirm"\n        >\n            {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.decreased.confirmButton\') }}\n        </sw-button>\n        </template>\n        {% endblock %}\n        {% endblock %}\n    </template>\n</sw-modal>\n{% endblock %}\n',props:{hasPriceIncreased:{type:Boolean,required:!0,default:()=>!1},previousTotalAmount:{type:Number|String,required:!0}},computed:{amountDecreasedDescription(){return this.$tc("cybersource_shopware6.orderSaveConfirmationModal.decreased.description",1,{previousTotalAmount:this.previousTotalAmount})}},methods:{onConfirm(){this.$emit("page-update-confirm")},onCancel(){this.$emit("page-update-cancel")},onClose(){this.$emit("page-update-close")}}})}()}();