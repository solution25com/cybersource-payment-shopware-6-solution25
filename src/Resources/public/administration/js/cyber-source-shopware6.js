!function(){var e={591:function(){let{Mixin:e}=Shopware;e.register("api-validation-errors",{methods:{handleError(e){switch(e.code){case"API_ERROR":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.API_ERROR"),autoClose:!0});break;case"ORDER_TRANSACTION_NOT_FOUND":this.createNotificationError({message:e.detail,autoClose:!0});break;case"REFUND_TRANSACTION_NOT_ALLOWED":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.REFUND_TRANSACTION_NOT_ALLOWED"),autoClose:!0});break;case"CHECKOUT__REFUND_PROCESS_INTERRUPTED":this.createNotificationError({message:this.$tc("cybersource_shopware6.exception.CYBERSOURCE_REFUND_AMOUNT_INCORRECT"),autoClose:!0})}}}})}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var n=t[a]={exports:{}};return e[a](n,n.exports,r),n.exports}r.p="bundles/cybersourceshopware6/",window?.__sw__?.assetPath&&(r.p=window.__sw__.assetPath+"/bundles/cybersourceshopware6/"),function(){"use strict";r(591);let{Component:e,Mixin:t}=Shopware,{mapState:a}=e.getComponentHelper();e.override("sw-order-detail-details",{template:'{% block sw_order_detail_details_payment_method_select %}\n    {% parent %}\n    <div class="cybersource-controls" v-if="isCyberSourceCreditCardPaymentMethod()">\n        <div class="refund-controls">\n            <sw-button-process v-if="(paymentStatus === \'open\' || paymentStatus === \'authorized\') && cybersourceTransactionId !== \'\' "\n                @click="onCaptureAction(cybersourceTransactionId)" :isLoading="buttonLoading">\n                {{ $tc(\'cybersource_shopware6.capture.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n\n        <div class="refund-controls">\n            <sw-button-process v-if="paymentStatus === \'paid\' || paymentStatus === \'refunded_partially\'" @click="onRefundAction(cybersourceTransactionId)" :isLoading="buttonLoading">\n             {{ $tc(\'cybersource_shopware6.refund.buttonTitle\') }}\n            </sw-button-process>\n        </div>\n    </div>\n{% endblock %}\n',mixins:["notification",t.getByName("api-validation-errors")],inject:["CybersourceOrderService"],props:{orderId:{required:!0,type:String}},data(){return{paymentStatus:"",cybersourceTransactionId:"",buttonLoading:!1,totalAmount:0}},computed:{...a("swOrderDetail",["order"])},methods:{isCyberSourceCreditCardPaymentMethod(){let e=this.order.transactions.first();return e.paymentMethod.name&&"CyberSourceCreditCard"==e.paymentMethod.name},onCaptureAction(e){this.buttonLoading=!0,this.CybersourceOrderService.capturePayment(this.orderId,e).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.capture.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="paid"),this.buttonLoading=!1}).catch(e=>(this.buttonLoading=!1,this.handleError(e.response.data.errors[0])))},onRefundAction(e){this.buttonLoading=!0,this.CybersourceOrderService.refundPayment(this.orderId,e,this.totalAmount).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.refund.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="refunded"),this.buttonLoading=!1}).catch(e=>(this.buttonLoading=!1,this.handleError(e.response.data.errors[0])))},createdComponent(){this.$super("createdComponent"),this.fetchOrderDetails()},fetchOrderDetails(){if(!this.isCyberSourceCreditCardPaymentMethod())return!1;this.orderId=this.order.id,this.CybersourceOrderService.getOrderByOrderId(this.orderId).then(e=>{this.cybersourceTransactionId=e.cybersource_transaction_id,this.paymentStatus=e.payment_status,this.totalAmount=e.amount}).catch(e=>this.handleError(e.response.data.errors[0]))}}});let{Application:o}=Shopware;class n{constructor(e,t){this.httpClient=e,this.loginService=t,this.name="CybersourceOrderService"}getOrderByOrderId(e){let t=this.getBasicHeaders();return this.httpClient.get(`/cybersource/order/${e}`,{headers:t}).then(e=>e.data.data)}refundPayment(e,t,r,a){let o=this.getBasicHeaders();return this.httpClient.post(`/cybersource/refund/${e}`,{transactionId:t,amount:r,lineItems:a},{headers:o}).then(e=>e.data.data)}transitionOrderPayment(e,t,r){let a=this.getBasicHeaders();return this.httpClient.post(`/cybersource/order/${e}/transition`,{targetState:t,currentState:r},{headers:a}).then(e=>e.data)}getBasicHeaders(){return{Accept:"application/json",Authorization:`Bearer ${this.loginService.getToken()}`}}}let{Application:i}=Shopware,s=i.getContainer("init");i.addServiceProvider("cybersourceOrderService",e=>{let t=e.loginService||s.loginService,r=s.httpClient;if(!r)throw console.error("initContainer.httpClient not found. Available services in initContainer:",Object.keys(s)),Error("HTTP client service is required and could not be found in initContainer for Shopware 6.6.10.x");return new n(r,t)});let{Component:c,Mixin:d,Data:{Criteria:l}}=Shopware;c.override("sw-order-detail",{template:'{% block sw_order_detail_actions_save %}\n<template >\n\n        <sw-order-update-page-modal\n            v-if="isDisplayingSaveChangesWarning"\n            @page-update-cancel="onSaveModalClose"\n            @page-update-confirm="onSaveModalConfirm"\n            @page-update-close="onSaveModalCancel"\n            :hasPriceIncreased="hasPriceIncreased"\n            :previousTotalAmount="previousTotalAmount"\n        />\n</template>\n<template v-else>\n{% parent %}\n</template>\n{% endblock %}\n',mixins:["notification",d.getByName("api-validation-errors")],inject:["cybersourceOrderService","orderService"],props:{orderId:{required:!0,type:String}},data(){return{paymentStatus:"",previousTotalAmount:0,cybersourceTransactionId:null,isDisplayingSaveChangesWarning:!1,next:null,hasPriceIncreased:!1,lineItems:[],isLoading:!1,selectedState:"",stateType:""}},watch:{order:{deep:!0,immediate:!0,handler(){this.fetchOrderDetails()}}},methods:{isCyberSourceCreditCardPaymentMethod(){if(!this.order)return!1;let e=this.order.transactions.first();return e?.paymentMethod?.name==="CyberSourceCreditCard"},createdComponent(){this.fetchOrderDetails(),this.$super("createdComponent")},isElligibleForCyberSourceRefund(){return this.order&&["paid","refunded_partially"].includes(this.paymentStatus)&&+this.order.price.totalPrice!==this.previousTotalAmount},fetchOrderDetails(){if(this.isCyberSourceCreditCardPaymentMethod()){if(this.cybersourceTransactionId=null,this.paymentStatus="",this.previousTotalAmount=0,this.lineItems=[],!this.cybersourceOrderService?.getOrderByOrderId){console.error("cybersourceOrderService or getOrderByOrderId is undefined"),this.createNotificationError({message:"Payment service unavailable."});return}this.cybersourceOrderService.getOrderByOrderId(this.orderId).then(e=>{}).catch(e=>(console.error("fetchOrderDetails error:",e),this.createNotificationError({message:"Failed to fetch order details."}),this.handleError(e.response?.data?.errors[0]||e)))}},onSaveEdits(){this.isOrderEditing&&this.isElligibleForCyberSourceRefund()?(this.hasPriceIncreased=+this.order.price.totalPrice>this.previousTotalAmount,this.isDisplayingSaveChangesWarning=!0):this.$super("onSaveEdits")},onSaveModalClose(){this.isDisplayingSaveChangesWarning=!1,this.isOrderEditing=!0,this.hasPriceIncreased||this.$super("onSaveEdits")},onSaveModalCancel(){this.isDisplayingSaveChangesWarning=!1},onSaveModalConfirm(){if(this.isDisplayingSaveChangesWarning=!1,this.hasPriceIncreased)return this.$super("onSaveEdits");let e=this.order.lineItems.map(e=>({number:e.position,productName:e.label,productCode:e.payload.productNumber,unitPrice:e.unitPrice,totalAmount:e.totalPrice,quantity:e.quantity,taxAmount:e.price.calculatedTaxes.reduce((e,t)=>e+=t.tax,0),productSku:e.payload.productNumber}));if(!this.cybersourceOrderService?.refundPayment){console.error("cybersourceOrderService or refundPayment is undefined"),this.createNotificationError({message:"Payment service unavailable."});return}this.cybersourceOrderService.refundPayment(this.orderId,this.cybersourceTransactionId,this.order.price.totalPrice,e).then(e=>{this.createNotificationSuccess({message:this.$tc("cybersource_shopware6.refund.successMessage")}),Object.prototype.hasOwnProperty.call(e,"id")&&(this.paymentStatus="refunded"),this.buttonLoading=!1,this.$super("onSaveEdits")}).catch(e=>(this.buttonLoading=!1,console.error("refundPayment error:",e),this.handleError(e.response?.data?.errors[0]||e)))},openStateChangeModal(e="order_transaction"){let t=this.order?.transactions[0],r=this.order?.deliveries[0];this.stateType=e,"order_transaction"===e?this.selectedState=t?.stateMachineState?.technicalName||"":"order_delivery"===e?this.selectedState=r?.stateMachineState?.technicalName||"":this.selectedState=this.order?.stateMachineState?.technicalName||"",console.log(`Opening state change modal for ${e} with initial selectedState:`,this.selectedState),this.$refs.orderStateModal?.openModal()}}}),Shopware.Component.register("sw-order-update-page-modal",{template:'{% block sw_order_update_page_modal %}\n<sw-modal\n    :title="$tc(\'cybersource_shopware6.orderSaveConfirmationModal.headline\')"\n    variant="small"\n    @modal-close="onClose"\n>\n\n    {% block sw_order_update_page_modal_content %}\n    <template v-if="hasPriceIncreased === true">\n        {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.increased.description\') }}\n    </template>\n    <template v-else>\n        <div\n            v-html="amountDecreasedDescription"\n        >\n        </div>\n    </template>\n    {% endblock %}\n\n    <template #modal-footer>\n        {% block sw_order_update_page_modal_actions %}\n\n        {% block sw_order_update_page_modal_action_cancel %}\n        <template v-if="hasPriceIncreased === true">\n            <sw-button\n                size="small"\n                @click="onCancel"\n            >\n                {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.increased.cancelButton\') }}\n            </sw-button>\n        </template>\n        <template v-else>\n            <sw-button\n                size="small"\n                @click="onCancel"\n            >\n                {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.decreased.cancelButton\') }}\n            </sw-button>\n        </template>\n        {% endblock %}\n\n        {% block sw_order_update_page_modal_action_confirm %}\n        <template v-if="hasPriceIncreased !== true">\n        <sw-button\n            variant="primary"\n            size="small"\n            @click="onConfirm"\n        >\n            {{ $tc(\'cybersource_shopware6.orderSaveConfirmationModal.decreased.confirmButton\') }}\n        </sw-button>\n        </template>\n        {% endblock %}\n        {% endblock %}\n    </template>\n</sw-modal>\n{% endblock %}\n',props:{hasPriceIncreased:{type:Boolean,required:!0,default:()=>!1},previousTotalAmount:{type:Number|String,required:!0}},computed:{amountDecreasedDescription(){return this.$tc("cybersource_shopware6.orderSaveConfirmationModal.decreased.description",1,{previousTotalAmount:this.previousTotalAmount})}},methods:{onConfirm(){this.$emit("page-update-confirm")},onCancel(){this.$emit("page-update-cancel")},onClose(){this.$emit("page-update-close")}}});let{Component:h}=Shopware,{Criteria:u}=Shopware.Data;h.override("sw-order-detail-general",{template:'{% block sw_order_detail_general %}\n\n<sw-card v-if="showTable" title="CyberSource Payment Transactions" position-identifier="cybersource-transactions">\n    <sw-data-grid\n        :dataSource="cybersourceTransactions"\n        :columns="cybersourceColumns"\n        :showSelection="false"\n        enable-columns-resize\n        :show-actions="false"\n    />\n</sw-card>\n\n\n    {% parent() %}\n{% endblock %}',inject:["repositoryFactory"],data(){return{orderTransactions:null,cybersourceColumns:[{property:"paymentId",label:"Payment ID"},{property:"type",label:"Type"},{property:"cardCategory",label:"Card Category"},{property:"paymentMethodType",label:"Payment Method Type"},{property:"amount",label:"Amount"},{property:"currency",label:"Currency"},{property:"expiryMonth",label:"Expiry Month"},{property:"expiryYear",label:"Expiry Year"},{property:"cardLast4",label:"Card Last 4"},{property:"gatewayAuthCode",label:"Gateway Authorization Code"},{property:"statusCode",label:"Response Code"},{property:"gatewayToken",label:"Gateway Token"},{property:"gatewayReference",label:"Gateway Reference"},{property:"lastUpdate",label:"Last Update"}],isCyberSourcePayment:!1}},computed:{showTable(){return this.isCyberSourcePayment},cybersourceTransactions(){let e=this.orderTransactions?.first(),t=e?.customFields?.cybersource_payment_details;return t&&Array.isArray(t.transactions)?t.transactions.slice().sort((e,t)=>new Date(t.last_update)-new Date(e.last_update)).map(e=>({paymentId:e.payment_id||"-",type:e.type||"-",cardCategory:e.card_category,paymentMethodType:e.payment_method_type||"-",amount:e.amount?Number(e.amount).toFixed(2):"-",currency:e.currency?`${e.currency}`:"-",expiryMonth:e.expiry_month?String(parseInt(e.expiry_month,10)):"-",expiryYear:e.expiry_year||"-",cardLast4:e.card_last_4||"-",gatewayAuthCode:e.gateway_authorization_code||"-",statusCode:e.status_code||"-",gatewayToken:e.gateway_token||"-",gatewayReference:e.transaction_id||"-",lastUpdate:this.formatDate(e.last_update)})):[]}},async created(){await this.fetchOrderTransactions(),await this.checkPaymentMethod()},methods:{async fetchOrderTransactions(){if(!this.order||!this.order.id){console.warn("Order not loaded yet.");return}let e=new u;e.addFilter(u.equals("orderId",this.order.id)),e.addSorting(u.sort("createdAt","DESC"));let t=this.repositoryFactory.create("order_transaction");try{this.orderTransactions=await t.search(e,Shopware.Context.api)}catch(e){console.error("Error fetching order transactions:",e)}},async checkPaymentMethod(){let e=this.orderTransactions?.first();if(!e){this.isCyberSourcePayment=!1;return}let t=await this.getPaymentMethod(e.paymentMethodId);this.isCyberSourcePayment=!(!t||"CyberSource\\Shopware6\\Gateways\\CreditCard"!==t.handlerIdentifier)},formatDate(e){if(!e)return"-";let t=new Date(e);return new Intl.DateTimeFormat("en-GB",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",hour12:!1}).format(t)},async getPaymentMethod(e){let t=this.repositoryFactory.create("payment_method"),r=new u;return r.addFilter(u.equals("id",e)),(await t.search(r,Shopware.Context.api)).first()}}});let{Component:p,Mixin:m}=Shopware;p.override("sw-order-state-change-modal-attach-documents",{template:'{#{% block sw_order_state_change_modal_attach_documents_button %}#}\n{#    <sw-button#}\n{#            class="sw-order-state-change-modal-attach-documents__button"#}\n{#            variant="primary"#}\n{#            size="small"#}\n{#            @click="onConfirm"#}\n{#    >#}\n{#        {{ $tc(\'sw-order.stateCard.labelSelectStateButton\') }}#}\n{#    </sw-button>#}\n{#{% endblock %}#}',inject:{cybersourceOrderService:"cybersourceOrderService",stateMachineService:"Shopware\\Core\\System\\StateMachine\\StateMachineService"},mixins:[m.getByName("notification")],emits:["on-confirm","on-cybersource-confirm","update:is-loading","modal-close"],props:{order:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},selectedState:{type:String,required:!1,default:""},initialSelectedState:{type:String,required:!1,default:""},stateType:{type:String,required:!1,default:"order_transaction"},technicalName:{type:String,required:!0},actionName:{type:String,required:!0}},data(){return{sendMail:!0}},methods:{async onConfirm(){let e=this.actionName,t=this.technicalName;if(!e||""===e.trim()){this.createNotificationError({message:"Please select a valid state for the transition."}),this.$emit("modal-close");return}let r=[];if(this.$refs.attachDocuments?.documents&&this.$refs.attachDocuments.documents.forEach(e=>{e.attach&&r.push(e.id)}),"order_transaction"===t){let a=this.order.transactions[0];if(!a){this.createNotificationError({message:"No transaction found."}),this.$emit("modal-close");return}console.log("currentState:",t,"targetState:",e);let o=this.getPaymentMethod(a.paymentMethodId);o?.handlerIdentifier==="CyberSource\\Shopware6\\Gateways\\CreditCard"?await this.handleCyberSourceTransition(a,r,this.sendMail,e):this.$emit("on-confirm",r,this.sendMail)}else if("order_delivery"===t){if(!this.order.deliveries[0]){this.createNotificationError({message:"No delivery found."}),this.$emit("modal-close");return}this.$emit("on-confirm",r,this.sendMail)}else this.$emit("on-confirm",r,this.sendMail)},getPaymentMethod(e){try{let t=this.order.transactions.find(t=>t.paymentMethodId===e);if(t&&t.paymentMethod)return t.paymentMethod;return null}catch(e){return this.createNotificationError({message:"Failed to retrieve payment method."}),null}},async handleCyberSourceTransition(e,t,r,a){if(this.$emit("update:is-loading",!0),!this.cybersourceOrderService||!this.cybersourceOrderService.transitionOrderPayment){this.createNotificationError({message:"Payment service unavailable."}),this.$emit("modal-close");return}let o={authorized:["paid","cancel"],paid:["refund","cancel"]},n=e.stateMachineState.technicalName.toLowerCase(),i=a.toLowerCase();if(!o[n]||!o[n].includes(i)){this.createNotificationError({message:`Invalid transition from ${n} to ${i}.`}),this.$emit("modal-close");return}try{let e=this.order.id,a=await this.cybersourceOrderService.transitionOrderPayment(e,i,n);a.success?(this.createNotificationSuccess({message:`Successfully transitioned to ${i}.`}),this.$emit("on-cybersource-confirm",t,r,!0),this.$emit("modal-close"),setTimeout(()=>location.reload(),2e3)):(this.createNotificationError({message:a.message||`Failed to transition to ${i}.`}),this.$emit("modal-close"))}catch(e){this.createNotificationError({message:"Transition error. Please try again."}),this.$emit("modal-close")}finally{this.$emit("update:is-loading",!1)}}},mounted(){}});let{Component:y,Mixin:b}=Shopware;y.override("sw-order-state-change-modal",{template:'{% block sw_order_state_change_modal %}\n<sw-modal\n    :title="modalTitle"\n    class="sw-order-state-change-modal"\n    @modal-close="onCancel"\n>\n\n    {% block sw_order_state_change_modal_attach_documents_component %}\n<sw-order-state-change-modal-attach-documents\n    :order="order"\n    :is-loading="isLoading"\n    :action-name="actionName"\n    :technical-name="technicalName"\n    @on-confirm="onDocsConfirm"\n/>\n\n    {% endblock %}\n</sw-modal>\n{% endblock %}\n',props:{order:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},technicalName:{type:String,required:!0},actionName:String}});let{Component:g,Mixin:f}=Shopware;g.override("sw-order-general-info",{template:'    {% block sw_order_state_change_card_modal %}\n        <sw-order-state-change-modal\n            v-if="showModal"\n            :order="order"\n            :is-loading="isLoading"\n            :technical-name="currentStateType"\n            :action-name="currentActionName"\n            @page-leave="onLeaveModalClose"\n            @page-leave-confirm="onLeaveModalConfirm"\n        />\n    {% endblock %}',props:{order:{type:Object,required:!0},isLoading:{type:Boolean,required:!0},technicalName:{type:String,required:!0},actionName:String}})}()}();