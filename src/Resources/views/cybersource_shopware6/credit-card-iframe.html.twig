<div class="payment-form">
    <div class="form-group">
        <label for="number-container">Card Number</label>
        <div id="number-container" class="microform-field"></div>
    </div>
    <div class="form-group">
        <label for="securityCode-container">CVV</label>
        <div id="securityCode-container" class="microform-field"></div>
    </div>
    <div class="form-group">
        <label>Expiration Date</label>
        <div class="expiry-group">
            <input id="expMonth" type="text" placeholder="MM" maxlength="2" required>
            <input id="expYear" type="text" placeholder="YYYY" maxlength="4" required>
        </div>
        <div id="expiry-error" class="error-message">Please enter a valid expiration date.</div>
    </div>
    <input id="cybersource_transaction_id" type="hidden" name="cybersource_transaction_id" value="">
    <input id="cybersource_payment_status" type="hidden" name="cybersource_payment_status" value="">
    <input id="cybersource_payment_uniqid" type="hidden" name="cybersource_payment_uniqid" value="">
    <div class="d-grid">
        <button id="confirmOrderButton" class="pay-btn btn" type="button">Pay Now</button>
    </div>
    <iframe id="step_up_iframe" name="step_up_iframe" height="400" width="400" style="display: none;"></iframe>
    <form id="step_up_form" target="step_up_iframe" method="POST" style="display: none;">
        <input type="hidden" id="step_up_jwt" name="JWT" value="">
    </form>
</div>

<script>
    let microform = null;
    const paymentForm = document.getElementById('confirmOrderForm');

    document.getElementById('confirmFormSubmit').style.display = 'none';
    document.getElementById('confirmOrderButton').addEventListener('click', function (e) {
        e.preventDefault();

        const monthInput = document.getElementById('expMonth');
        const yearInput = document.getElementById('expYear');
        const errorMessage = document.getElementById('expiry-error');

        // Reset error states
        monthInput.classList.remove('error');
        yearInput.classList.remove('error');
        errorMessage.style.display = 'none';

        // Validate expiration date
        const month = monthInput.value.trim();
        const year = yearInput.value.trim();
        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth() + 1; // 1-12

        if (!month || !year || !/^\d{2}$/.test(month) || !/^\d{4}$/.test(year)) {
            showError('Please enter a valid expiration date (MM/YYYY).');
            return;
        }

        const monthNum = parseInt(month, 10);
        const yearNum = parseInt(year, 10);

        if (monthNum < 1 || monthNum > 12) {
            showError('Month must be between 01 and 12.');
            return;
        }

        if (yearNum < currentYear || (yearNum === currentYear && monthNum < currentMonth)) {
            showError('Expiration date cannot be in the past.');
            return;
        }

        if (!microform) {
            alert('Card fields are not loaded yet. Please wait a few seconds.');
            return;
        }

        microform.createToken({
            cardExpirationMonth: month,
            cardExpirationYear: year
        }, function (err, token) {
            if (err) {
                console.error('Tokenize failed', err);
                alert('Card information could not be verified.');
            } else {
                authorizePayment(token);
            }
        });
    });

    // Load CyberSource Flex Microform
    fetch('/cybersource/capture-context')
        .then(res => res.json())
        .then(data => {
            const captureContext = data.captureContext;
            const parts = captureContext.split('.');
            const payload = JSON.parse(atob(parts[1]));
            const libUrl = payload.ctx[0].data.clientLibrary;
            const integrity = payload.ctx[0].data.clientLibraryIntegrity;

            const script = document.createElement('script');
            script.src = libUrl;
            script.integrity = integrity;
            script.crossOrigin = 'anonymous';
            script.onload = () => {
                const flex = new Flex(captureContext);
                microform = flex.microform({
                    styles: {
                        input: {
                            'font-size': '14px',
                            'color': '#333',
                            'border': '1px solid #ccc',
                            'border-radius': '4px'
                        }
                    }
                });

                microform.createField('number', { placeholder: 'Card Number' }).load('#number-container');
                microform.createField('securityCode', { placeholder: 'CVV' }).load('#securityCode-container');
            };
            document.head.appendChild(script);
        })
        .catch(err => console.error('Failed to load capture context:', err));

    function authorizePayment(token) {
        const month = document.getElementById('expMonth').value.trim();
        const year = document.getElementById('expYear').value.trim();
        fetch('/cybersource/authorize-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ token, expirationMonth: month, expirationYear: year })
        })
            .then(res => res.json())
            .then(data => {
                //debugger;
                if (!data.transactionId) {
                    alert('Payment failed. Please try again.');
                    return;
                }
                document.getElementById('cybersource_transaction_id').value = data.transactionId;
                document.getElementById('cybersource_payment_status').value = data.status;
                document.getElementById('cybersource_payment_uniqid').value = data.uniqid;
                switch (data.action) {
                    case 'complete':
                        const submitButton = document.getElementById('confirmFormSubmit');
                        if (submitButton) {
                            submitButton.click();
                        }
                        break;

                    case '3ds':
                        const stepUpForm = document.getElementById('step_up_form');
                        const jwtInput = document.getElementById('step_up_jwt');
                        const iframe = document.getElementById('step_up_iframe');

                        stepUpForm.action = data.stepUpUrl;
                        jwtInput.value = data.accessToken;

                        stepUpForm.style.display = 'block';
                        iframe.style.display = 'block';
                        stepUpForm.submit();
                        break;

                    case 'notify':
                        alert(data.message);
                        break;

                    default:
                        alert('Unknown action: ' + data.action);
                }
            })
            .catch(err => console.error('Payment error:', err));
    }
    window.addEventListener('message', function (event) {
        const data = event.data;
        if (data.action) {
            document.getElementById('cybersource_transaction_id').value = data.transactionId;
            document.getElementById('cybersource_payment_status').value = data.status;
            document.getElementById('cybersource_payment_uniqid').value = data.uniqid;
            switch (data.action) {
                case 'complete':
                    const submitButton = document.getElementById('confirmFormSubmit');
                    if (submitButton) {
                        submitButton.click();
                    }
                    break;
                case 'notify':
                    alert(data.message);
                    break;
                default:
                    alert('Unknown action: ' + data.action);
            }
        }
    });
    function showError(message) {
        const monthInput = document.getElementById('expMonth');
        const yearInput = document.getElementById('expYear');
        const errorMessage = document.getElementById('expiry-error');

        monthInput.classList.add('error');
        yearInput.classList.add('error');
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        monthInput.focus();
    }
</script>

<style>
    .payment-form {
        max-width: 400px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        font-family: Arial, sans-serif;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        font-size: 14px;
        margin-bottom: 5px;
        color: #333;
    }

    input, .microform-field {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        height: 40px;
    }

    .expiry-group {
        display: flex;
        gap: 10px;
    }

    .expiry-group input {
        width: 50%;
    }

    .pay-btn {
        display: block;
        width: 100%;
        padding: 12px;
        font-size: 16px;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn:hover {
        background-color: #0056b3;
    }

    #step_up_iframe {
        margin-top: 20px;
        border: 1px solid #ddd;
    }

    .error {
        border-color: #dc3545;
    }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }
</style>
